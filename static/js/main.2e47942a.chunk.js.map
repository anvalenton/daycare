{"version":3,"sources":["ShiftBlock.js","Room.js","actionCreators.js","DayHeaders2.js","AllRooms.js","Clock.js","App.js","reportWebVitals.js","rootReducer.js","index.js"],"names":["ShiftBlock","hoursObj","roomObj","dateObj","pmEmployees","amEmployees","shiftGrp","amStart","amEnd","pmStart","pmEnd","shifts","amShiftColor","AM","pmShiftColor","PM","className","map","worker","name","Room","roomNum","roomData","hours","useSelector","st","days","workingdays","shallowEqual","roomSked","employees","data","numKeys","numKeys2","empAndDayMatchedArray","day","shiftGroup","amEmpGroup","pmEmpGroup","daySked","emp","group","color","push","length","notes","elem","getSchedule","requestedPayload","dispatch","a","axios","post","response","arrayFromRes","withinHours","withinBusinessHours","type","isDaycareOpen","gotError","error","Error","date","Date","getDay","isWithinHours","hour","getHours","minutes","getMinutes","DayHeaders2","useDispatch","workingDaysInStore","useEffect","updatedDays","workDaysArray","workDaysCopy","moDateToday","moment","format","firstDayObj","firstDayInStore","moDate","firstDayShiftGrp","nxtWeekDate","add","nextShiftGrp","updatedWorkDate","shift","updatedWorkDays","checkOrUpdateWorkingDays","dayElem","uuid","payload","AllRooms","callToStore","intervalIDFromStore","state","intervalID","isOpenFromStore","startIntervalID","setIntervalAsync","clearInterval","room1Data","room1","room2Data","room2","Clock","timeNow","useState","clock","updateClock","timerID","setInterval","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","rootReducer","action","yesterdayShift","newShiftGroup","store","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2e47942a.chunk.js","sourcesContent":["\nimport React from \"react\";\nimport \"./ShiftBlock.css\";\nimport './Employee.css';\n\n\nconst ShiftBlock = ({hoursObj, roomObj, dateObj, pmEmployees, amEmployees}) => {\n   \n\n\nconst {shiftGrp} = dateObj;\nconst {amStart, amEnd, pmStart, pmEnd} = hoursObj;\nconst shifts = roomObj[shiftGrp];\nconst amShiftColor = shifts.AM;\nconst pmShiftColor = shifts.PM\n\nreturn (\n<>\n    <div className='shiftblock-container-ampm'>\n    \n        <div className={'shiftblock-container amshiftblock'}> \n            <div className='shiftblock-subcontainer-starttime time'>{amStart}</div>\n\n                <div className='shiftblock-subcontainer-emp'>\n                    {amEmployees.map((worker) => {\n                        return <div key={`${worker.name}-${amShiftColor}`} className={`employeename-subcontainer ${amShiftColor}`} >\n                            <span className='employeename'>{worker.name}</span>\n                        </div>\n                    })}\n                </div>\n            <div className=\"time\">{amEnd}</div>\n        </div> \n\n        <div className={'shiftblock-container pmshiftblock'}> \n            <div className='shiftblock-subcontainer-starttime time'>{pmStart}</div>\n\n                <div className='shiftblock-subcontainer-emp'>\n                    {pmEmployees.map((worker) => {\n                        return <div key={`${worker.name}-${pmShiftColor}`} className={`employeename-subcontainer ${pmShiftColor}`} >\n                            <span className='employeename'>{worker.name}</span>\n                        </div>\n                    })}\n                </div>\n            <div className=\"time\">{pmEnd}</div>\n        </div> \n    </div>\n\n</>\n)\n\n};\n\nexport default ShiftBlock;","import React from \"react\";\nimport \"./Room.css\";\nimport ShiftBlock from \"./ShiftBlock\";\nimport { shallowEqual, useSelector} from \"react-redux\";\n\n\nconst Room = ({roomNum, roomData}) => {\n\n\nconst hours = useSelector(st => st.hours);\nconst days =  useSelector(st =>st.workingdays, shallowEqual);\nconst roomSked = useSelector(st => st[`room${roomNum}`]);\nconst employees = useSelector (st => st.data, shallowEqual);\nconst numKeys = useSelector(st => st.numKeys2);\n\nconst empAndDayMatchedArray = [];\n\n//loops below match employees to their designated days\n//so child components do not need to filter the array again\nfor (let day of days) {\n                    //e.g. 'A', 'B'\n    let shiftGroup = day.shiftGrp;\n    let amEmpGroup =[];\n    let pmEmpGroup =[];\n                  //e.g. {'a': {'am: 'red', 'pm': 'blue'}}\n    let daySked = roomSked[shiftGroup]\n\n    for (let emp of employees) {\n            //e.g. 1,2         \n        if (numKeys[emp.group].color === daySked.AM  ) {\n            amEmpGroup.push(emp);\n        }\n\n        if (numKeys[emp.group].color === daySked.PM  ) {\n            pmEmpGroup.push(emp);\n        }\n\n    }\n    if (!amEmpGroup.length) amEmpGroup.push({name: 'None'})\n    if (!pmEmpGroup.length) pmEmpGroup.push({name: 'None'});\n\n    empAndDayMatchedArray.push({day, amEmpGroup,pmEmpGroup})\n}\n\n\nreturn (\n\n    <div className='room-container'>\n        <div className='room-container-roomnum-container'>\n            <div className={`room-container-roomnum room${roomNum}`}>ROOM {roomNum}</div>\n       </div>\n\n       <div className='room-container-notes'>\n           <h2>ROOM DETAILS</h2>\n           {roomData.notes}\n        </div>\n\n       <div className='room-rows'>\n           {empAndDayMatchedArray.map((elem) => {\n\n                \n                return <ShiftBlock dateObj={elem.day} hoursObj={hours} roomObj={roomSked} amEmployees={elem.amEmpGroup} pmEmployees={elem.pmEmpGroup}></ShiftBlock>\n\n           })}\n\n           \n       </div>\n       \n\n    </div>\n\n\n)\n\n}\n\n\nexport default Room;","\nimport axios from 'axios';\nimport moment from 'moment';\n\n\nconst API_URL = \"https://app.fakejson.com/q\";\n\n\n\nexport function getSchedule(requestedPayload) {\n  \n  //dispatch (can be called anything) is the dispatch function being exposed by thunk middleware\n  //dispatch needs to be passed into the async func to be called\n  return async function (dispatch) {\n    try {\n     \n      const response = await axios.post(API_URL, requestedPayload);\n      const arrayFromRes = response.data;\n      const withinHours = withinBusinessHours();\n      \n\n      if (withinHours) {\n        dispatch(gotNewData(arrayFromRes))\n        \n      }\n      \n      else if(!withinHours) {\n       \n          dispatch(closeBiz());\n      }\n\n    } \n    \n    catch (e) {\n      dispatch(gotError(e))\n    }\n  }\n}\n\nfunction gotNewData(schedule) {\n  return {\n    type: 'UPDATE_SCHEDULE',\n    data: schedule\n  }\n}\n\nfunction gotError(error) {\n  \n    throw new Error('API call did not work');\n}\n\nfunction closeBiz() {\n    return {\n        type: 'UPDATE_BUSINESS_CLOSE',\n        isDaycareOpen: false\n    }\n}\n\n\n\n//below to be called on first render inside a useEffect\n//storestate should be array itself and not store object\n//argument being passed in is work day array\nexport function checkOrUpdateWorkingDays(workDaysArray) {\n    \n    //below is working days array\n    //first elem in array should be current day\n    //if not, its removed and new working date pushed to end\n    const workDaysCopy = [...workDaysArray];\n    // today moment object\n    const cur = moment()\n    //below gives \"8/23\" string format\n    \n    const moDateToday = cur.format(\"M[/]DD/YY\")\n\n    //first element in store.workingdays. first elem should represent current day\n    let firstDayObj = workDaysCopy[0];\n    let firstDayInStore = workDaysCopy[0].moDate;\n\n    if (moDateToday === firstDayInStore) {\n      \n      return;}\n\n   \n      while (firstDayInStore !== moDateToday) {\n\n      \n      let firstDayShiftGrp = firstDayObj.shiftGrp\n      //get nextweek day object\n      let nxtWeekObj = moment(firstDayInStore).add(7,'days');\n     \n      //below gets '8/21' format\n      let nxtWeekDate = nxtWeekObj.format(\"M[/]DD/YY\");\n      let nextShiftGrp = firstDayShiftGrp === 'A'? 'B': 'A';\n      \n      let updatedWorkDate = {...firstDayObj, moDate: nxtWeekDate, shiftGrp: nextShiftGrp}\n      //pushing updated/new workday object to end of array\n      workDaysCopy.push(updatedWorkDate);\n      workDaysCopy.shift();\n      \n      firstDayObj = workDaysCopy[0];\n      firstDayInStore = workDaysCopy[0].moDate;\n\n      }\n    \n      \n    return {\n      type: 'UPDATE_WORKINGDAYS',\n      updatedWorkDays: workDaysCopy\n  }\n\n}\n\n\nexport function withinBusinessHours() {\n    \n    const startHourInAM = 7;\n    const endHourInPM = 17;\n    const endMinutesInPM = 30;\n\n    const date = new Date();\n    const day = date.getDay();\n    const isWeekday = day > 0 && day < 6 ? true : false;\n\n    if (!isWeekday) return false;\n\n    const hour = date.getHours();\n    const minutes = date.getMinutes();\n\n    let isWithinHours;\n\n    if (hour >= startHourInAM && hour <= endHourInPM) {\n\n        if (hour === endHourInPM && minutes >= endMinutesInPM) {\n            isWithinHours = false;\n        }\n\n        else {\n            isWithinHours = true;\n        }\n    }\n    return isWithinHours;\n    \n\n}\n\n","import React, {useEffect} from \"react\";\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\nimport \"./DayHeaders2.css\";\nimport { checkOrUpdateWorkingDays } from \"./actionCreators\";\nimport uuid from 'react-uuid'\n\nconst DayHeaders2 = () => {\n\n   \n    const dispatch = useDispatch();\n\n    const workingDaysInStore= useSelector(st => st.workingdays,shallowEqual);\n\n    useEffect(() => {\n        \n        const updatedDays = checkOrUpdateWorkingDays(workingDaysInStore);\n         //updates days in store array after render. will cause rerender\n            //if workingdays array is not current\n        dispatch(updatedDays);\n\n        //below code gets rid of error of missing dependency. if i add dispatch or workingDaysInstore to dependency, it will create an infinite loop\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [dispatch])\n    \n\n\n    return (\n\n        <div className='dayheader-container'>\n           \n            <div className='days-container' >\n                {workingDaysInStore.map((dayElem) => (\n                   <div key={uuid()} className='wholeday-container'>\n\n                        <div className='day-container'>\n                        {dayElem.day}\n                        </div>\n\n                        <div>\n                        {dayElem.moDate}   \n                        </div>\n\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n\n}\n\nexport default DayHeaders2;","import React, { useEffect } from \"react\";\nimport Room from \"./Room.js\";\nimport \"./AllRooms.css\";\nimport { getSchedule } from \"./actionCreators\";\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\nimport { setIntervalAsync } from 'set-interval-async/dynamic';\nimport DayHeaders2 from \"./DayHeaders2.js\";\n\n//payload is the contains auth token to get dummy info from fakeJSON.com site\n//return is an array of person objects, has 10 elements\nconst payload = {\n    \"token\": \"apbFv44NakazHojFbikJLw\",\n    \"data\": { \n    \"name\": \"nameFirst\",\n    \"working\": \"numberBool\",\n    \"group\": \"numberInt|1,4\",\n    \"_repeat\": 8\n    }\n  };\n\nconst AllRooms = () => {\n\n    //callToStore allows usage of dispatch() directly\n    const callToStore = useDispatch();\n\n    //two variables below check the values intervalID and isDaycareOpen\n    //from the redux store\n    let intervalIDFromStore = useSelector(state => state.intervalID, shallowEqual);\n\n    let isOpenFromStore = useSelector(state => state.isDaycareOpen, shallowEqual);\n\n    \n  \n   \n    useEffect(() => {\n    \n            //when callToStore is run, dispatch is run within that func\n            //getSchedule calls dispatch \n            //dispatch within getSchedule is to update state with response received\n            //this is first call to the API upon start of app\n            callToStore(getSchedule(payload));\n            \n\n            //below is an async interval to run throughout the day\n            let startIntervalID = setIntervalAsync(() => {               \n                callToStore(getSchedule(payload))}    \n                , 300000);\n\n            //5 min 300,000 milsecs\n\n            //adding the newly created intervalID to state store\n            //argument passed in is the action object to be received by rootReducer\n            callToStore({type:'UPDATE_INTERVAL_ID', intervalID: startIntervalID })\n\n          return (\n              clearInterval(startIntervalID)\n          )\n      \n    }, [callToStore])  \n\n    //callToStore added as dependency of useEffect for stability. runs once.\n\n    useEffect(() => {\n        if (!isOpenFromStore) {\n            clearInterval(intervalIDFromStore);\n        }\n       \n    }, [isOpenFromStore, intervalIDFromStore])\n\n   \n    //can be refactored in the future as a loop if more rooms will be added\n    const room1Data = useSelector(st => st.room1);\n    const room2Data = useSelector(st => st.room2);\n\n\nreturn (\n\n    <>\n        <div className='allrooms-container'>\n        <DayHeaders2></DayHeaders2>\n        <Room roomNum='1' roomData={room1Data} />\n\n        <Room roomNum='2' roomData={room2Data} />\n        </div>\n    </>\n\n\n)\n\n}\n\n\nexport default AllRooms;","import React, {useState, useEffect} from \"react\";\nimport moment from 'moment';\nimport './Clock.css';\n\n\nconst Clock = () => {\n\n\n    let timeNow = moment().format('LTS'); \n    const [clock, updateClock] = useState(timeNow);\n\n    useEffect(() => {\n\n        const timerID = setInterval(() => {\n            updateClock(moment().format('LTS'))\n\n        },1000)\n\n        return () => clearInterval(timerID);\n\n    }, [])\n\n    return (\n        <div className=\"clock-container\">\n            <div className='clock-date'>{moment().format(\"MMMM D YYYY\")}</div>\n            <div className='clock'>{clock}</div>\n\n\n        </div>\n        \n\n\n    )\n\n\n}\n\n\nexport default Clock;","\nimport AllRooms from './AllRooms';\nimport Clock from \"./Clock\";\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <Clock></Clock>\n      <AllRooms></AllRooms>\n    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\n\nconst INITIAL_STATE = {\n    \"data\": [\n    {\n    \"name\": \"Sam\",\n    \"working\": true,\n    'group': 1\n    },\n    {\n    \"name\": \"Mary\",\n    \"working\": true,\n    'group': 2\n    },\n    \n    {\n    \"name\": \"Alexio\",\n    \"working\": true,\n    'group': 3\n        },\n\n    {\n    \"name\": \"Andrew\",\n    \"working\": true,\n    'group': 4\n         }\n    ],\n    'isDaycareOpen': true,\n    'intervalID': null,\n    'workingdays': [\n        {'moDate': '8/23/21', 'day': 'Monday', 'shiftGrp': 'A'},\n        {'moDate': '8/24/21', 'day': 'Tuesday', 'shiftGrp': 'B'},\n        {'moDate': '8/25/21', 'day': 'Wednesday', 'shiftGrp': 'A'},\n        {'moDate': '8/26/21', 'day': 'Thursday', 'shiftGrp': 'B'},\n        {'moDate': '8/27/21', 'day': 'Friday', 'shiftGrp': 'A'}\n    ],\n    'hours':{\n    'amStart': '7:00 AM',\n    'amEnd':'12:00 PM',\n    'pmStart': '12:00 PM',\n    'pmEnd': '5:30 PM'\n    },  \n\n    'room1': {\n        'A':\n       {'AM': 'red',\n       'PM': 'red',},\n       'B': {\n        'AM': 'blue',\n        'PM': 'blue',},\n        'notes': \"Under 5 years old\"\n    },\n\n    'room2': {\n        'A':\n       {'AM': 'red',\n       'PM': 'blue',},\n       'B': {\n        'AM': 'yellow',\n        'PM': 'green',},\n        'notes': 'Over 5 years old'\n    },\n\n  \n    'numKeys2': {\n        '1': {'letter':'A', 'color': 'red'},\n        '2': {'letter':'B', 'color': 'blue'},\n        '3': {'letter': 'C', 'color': 'yellow'},\n        '4': {'letter': 'D', 'color': 'green'}\n    }\n\n    \n    };\n\n\nfunction rootReducer(state=INITIAL_STATE, action) {\n\n    switch(action.type) {\n\n        case 'UPDATE_SCHEDULE':\n            //just replacing the state object with new data from api.\n    \n            return { ...state, data: action.data};\n\n        case 'UPDATE_BUSINESS_CLOSE':\n   \n            return {...state, isDaycareOpen: action.isDaycareOpen };\n\n        case 'UPDATE_INTERVAL_ID':\n\n            return {...state, intervalID: action.intervalID};\n\n        case 'UPDATE_WORKINGDAYS':\n           \n            return {...state, workingdays: action.updatedWorkDays};\n\n        case 'UPDATE_YESTERDAYSHIFTGROUP':\n\n            return {...state, yesterdayShift: action.newShiftGroup};\n\n        default:\n            return state;\n    }\n\n}\n\n\n  export default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport rootReducer from './rootReducer';\nimport {Provider} from 'react-redux';   \nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from 'redux-thunk'\n\n\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(thunk),\n    typeof window.__REDUX_DEVTOOLS_EXTENSION__ === \"undefined\"\n      ? a => a\n      : window.__REDUX_DEVTOOLS_EXTENSION__ &&\n          window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nReactDOM.render(\n  \n    <Provider store={store}>\n      <App />\n    </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}